namespace sign {
	// Encoding "borrowed" from signs_lib fork at: https://github.com/lord-server/lord

	/** String Translate. */
	const st = string.char;

	const ansi_decode: Dictionary<number, string> = {
		[128]: st(208) + st(130),
		[129]: st(208) + st(131),
		[130]: st(226) + st(128) + st(154),
		[131]: st(209) + st(147),
		[132]: st(226) + st(128) + st(158),
		[133]: st(226) + st(128) + st(166),
		[134]: st(226) + st(128) + st(160),
		[135]: st(226) + st(128) + st(161),
		[136]: st(226) + st(130) + st(172),
		[137]: st(226) + st(128) + st(176),
		[138]: st(208) + st(137),
		[139]: st(226) + st(128) + st(185),
		[140]: st(208) + st(138),
		[141]: st(208) + st(140),
		[142]: st(208) + st(139),
		[143]: st(208) + st(143),
		[144]: st(209) + st(146),
		[145]: st(226) + st(128) + st(152),
		[146]: st(226) + st(128) + st(153),
		[147]: st(226) + st(128) + st(156),
		[148]: st(226) + st(128) + st(157),
		[149]: st(226) + st(128) + st(162),
		[150]: st(226) + st(128) + st(147),
		[151]: st(226) + st(128) + st(148),
		[152]: st(194) + st(152),
		[153]: st(226) + st(132) + st(162),
		[154]: st(209) + st(153),
		[155]: st(226) + st(128) + st(186),
		[156]: st(209) + st(154),
		[157]: st(209) + st(156),
		[158]: st(209) + st(155),
		[159]: st(209) + st(159),
		[160]: st(194) + st(160),
		[161]: st(209) + st(142),
		[162]: st(209) + st(158),
		[163]: st(208) + st(136),
		[164]: st(194) + st(164),
		[165]: st(210) + st(144),
		[166]: st(194) + st(166),
		[167]: st(194) + st(167),
		[168]: st(208) + st(129),
		[169]: st(194) + st(169),
		[170]: st(208) + st(132),
		[171]: st(194) + st(171),
		[172]: st(194) + st(172),
		[173]: st(194) + st(173),
		[174]: st(194) + st(174),
		[175]: st(208) + st(135),
		[176]: st(194) + st(176),
		[177]: st(194) + st(177),
		[178]: st(208) + st(134),
		[179]: st(209) + st(150),
		[180]: st(210) + st(145),
		[181]: st(194) + st(181),
		[182]: st(194) + st(182),
		[183]: st(194) + st(183),
		[184]: st(209) + st(145),
		[185]: st(226) + st(132) + st(150),
		[186]: st(209) + st(148),
		[187]: st(194) + st(187),
		[188]: st(209) + st(152),
		[189]: st(208) + st(133),
		[190]: st(209) + st(149),
		[191]: st(209) + st(151),
	};

	const utf8_decode: Dictionary<number, Dictionary<number, string>> = {
		[128]: {
			[147]: st(150),
			[148]: st(151),
			[152]: st(145),
			[153]: st(146),
			[154]: st(130),
			[156]: st(147),
			[157]: st(148),
			[158]: st(132),
			[160]: st(134),
			[161]: st(135),
			[162]: st(149),
			[166]: st(133),
			[176]: st(137),
			[185]: st(139),
			[186]: st(155),
		},

		[130]: { [172]: st(136) },
		[132]: { [150]: st(185), [162]: st(153) },
		[194]: {
			[152]: st(152),
			[160]: st(160),
			[164]: st(164),
			[166]: st(166),
			[167]: st(167),
			[169]: st(169),
			[171]: st(171),
			[172]: st(172),
			[173]: st(173),
			[174]: st(174),
			[176]: st(176),
			[177]: st(177),
			[181]: st(181),
			[182]: st(182),
			[183]: st(183),
			[187]: st(187),
		},
		[208]: {
			[129]: st(168),
			[130]: st(128),
			[131]: st(129),
			[132]: st(170),
			[133]: st(189),
			[134]: st(178),
			[135]: st(175),
			[136]: st(163),
			[137]: st(138),
			[138]: st(140),
			[139]: st(142),
			[140]: st(141),
			[143]: st(143),
			[144]: st(192),
			[145]: st(193),
			[146]: st(194),
			[147]: st(195),
			[148]: st(196),
			[149]: st(197),
			[150]: st(198),
			[151]: st(199),
			[152]: st(200),
			[153]: st(201),
			[154]: st(202),
			[155]: st(203),
			[156]: st(204),
			[157]: st(205),
			[158]: st(206),
			[159]: st(207),
			[160]: st(208),
			[161]: st(209),
			[162]: st(210),
			[163]: st(211),
			[164]: st(212),
			[165]: st(213),
			[166]: st(214),
			[167]: st(215),
			[168]: st(216),
			[169]: st(217),
			[170]: st(218),
			[171]: st(219),
			[172]: st(220),
			[173]: st(221),
			[174]: st(222),
			[175]: st(223),
			[176]: st(224),
			[177]: st(225),
			[178]: st(226),
			[179]: st(227),
			[180]: st(228),
			[181]: st(229),
			[182]: st(230),
			[183]: st(231),
			[184]: st(232),
			[185]: st(233),
			[186]: st(234),
			[187]: st(235),
			[188]: st(236),
			[189]: st(237),
			[190]: st(238),
			[191]: st(239),
		},
		[209]: {
			[128]: st(240),
			[129]: st(241),
			[130]: st(242),
			[131]: st(243),
			[132]: st(244),
			[133]: st(245),
			[134]: st(246),
			[135]: st(247),
			[136]: st(248),
			[137]: st(249),
			[138]: st(250),
			[139]: st(251),
			[140]: st(252),
			[141]: st(253),
			[142]: st(254),
			[143]: st(255),
			[144]: st(161),
			[145]: st(184),
			[146]: st(144),
			[147]: st(131),
			[148]: st(186),
			[149]: st(190),
			[150]: st(179),
			[151]: st(191),
			[152]: st(188),
			[153]: st(154),
			[154]: st(156),
			[155]: st(158),
			[156]: st(157),
			[158]: st(162),
			[159]: st(159),
		},
		[210]: { [144]: st(165), [145]: st(180) },
	};

	const nmdc: Dictionary<number, string> = {
		[36]: "$",
		[124]: "|",
	};

	export function AnsiToUtf8(s: string): string {
		let r: string = "";
		let b: number = 0;
		for (const i of $range(1, s.length || 0)) {
			b = string.byte(s, i);

			if (b < 128) {
				r += string.char(b);
			} else {
				if (b > 239) {
					r = r + st(209) + string.char(b - 112);
				} else if (b > 191) {
					r = r + st(208) + string.char(b - 48);
				} else if (ansi_decode[b] != null) {
					r = r + ansi_decode[b];
				} else {
					r = r + "_";
				}
			}
		}
		return r;
	}

	// function Utf8ToAnsi(s)
	// 	local a, j, r, b = 0, 0, ""
	// 	for i = 1, s and s:len() or 0 do
	// 		b = s:byte(i)
	// 		if b < 128 then
	// 			if nmdc[b] then
	// 				r = r + nmdc[b]
	// 			else
	// 				r = r + string.char(b)
	// 			end
	// 		elseif a == 2 then
	// 			a, j = a - 1, b
	// 		elseif a == 1 then
	// 			//if j == nil or b == nil then return r end
	// 			//print(j)
	// 			//print(b)
	// 			//local ansi = utf8_decode[j]
	// 			//if ansi == nil then return r end
	// 			//if ansi[b] == nil then return r end
	// 			if utf8_decode[j] then
	// 				if utf8_decode[j][b] then
	// 					a, r = a - 1, r + utf8_decode[j][b]
	// 				end
	// 			end
	// 		elseif b == 226 then
	// 			a = 2
	// 		elseif b == 194 or b == 208 or b == 209 or b == 210 then
	// 			j, a = b, 1
	// 		else
	// 			r = r + "_"
	// 		end
	// 	end
	// 	return r
	// end
}
